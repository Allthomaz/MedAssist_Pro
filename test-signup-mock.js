/**
 * Teste de Cadastro com Mock do Supabase
 * 
 * Este script testa a l√≥gica de cadastro sem depender do Supabase local,
 * usando mocks para simular as respostas da API.
 */

// Mock do Supabase Auth
const mockSupabaseAuth = {
  signUp: async (options) => {
    console.log('üìù Mock Supabase Auth - signUp chamado com:', {
      email: options.email,
      password: '[REDACTED]',
      data: options.options?.data
    });

    // Simular valida√ß√£o de email
    if (!options.email || !options.email.includes('@')) {
      return {
        data: null,
        error: { message: 'Email inv√°lido' }
      };
    }

    // Simular valida√ß√£o de senha
    if (!options.password || options.password.length < 8) {
      return {
        data: null,
        error: { message: 'Senha deve ter pelo menos 8 caracteres' }
      };
    }

    // Simular sucesso
    const mockUser = {
      id: `user_${Date.now()}`,
      email: options.email,
      user_metadata: options.options?.data || {}
    };

    console.log('‚úÖ Mock: Usu√°rio criado com sucesso:', {
      id: mockUser.id,
      email: mockUser.email,
      metadata: mockUser.user_metadata
    });

    return {
      data: {
        user: mockUser,
        session: null // Usu√°rio precisa confirmar email
      },
      error: null
    };
  }
};

// Mock do trigger de cria√ß√£o de perfil
const mockProfileTrigger = {
  createProfile: (user) => {
    console.log('üîÑ Mock: Trigger create_profile_for_user executado');
    
    const profile = {
      id: user.id,
      email: user.email,
      full_name: user.user_metadata.full_name || '',
      role: user.user_metadata.profession || 'M√©dico',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    console.log('‚úÖ Mock: Perfil criado automaticamente:', profile);
    return profile;
  }
};

// Fun√ß√£o de teste do fluxo de cadastro
async function testSignUpFlow() {
  console.log('üöÄ Iniciando teste do fluxo de cadastro com mocks\n');

  // Dados de teste
  const testData = {
    email: `teste.${Date.now()}@medassist.com`,
    password: 'MinhaSenh@123',
    fullName: 'Dr. Jo√£o Silva',
    profession: 'M√©dico'
  };

  console.log('üìã Dados de teste:', {
    email: testData.email,
    password: '[REDACTED]',
    fullName: testData.fullName,
    profession: testData.profession
  });

  try {
    // 1. Testar valida√ß√£o de dados
    console.log('\nüîç Etapa 1: Valida√ß√£o de dados');
    
    // Validar email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(testData.email)) {
      throw new Error('Email inv√°lido');
    }
    console.log('‚úÖ Email v√°lido');

    // Validar senha
    if (testData.password.length < 8) {
      throw new Error('Senha muito curta');
    }
    console.log('‚úÖ Senha v√°lida');

    // Validar nome completo
    if (!testData.fullName || testData.fullName.length < 2) {
      throw new Error('Nome completo inv√°lido');
    }
    console.log('‚úÖ Nome completo v√°lido');

    // Validar profiss√£o
    const validProfessions = ['M√©dico', 'Psic√≥logo', 'Terapeuta'];
    if (!validProfessions.includes(testData.profession)) {
      throw new Error('Profiss√£o inv√°lida');
    }
    console.log('‚úÖ Profiss√£o v√°lida');

    // 2. Testar cria√ß√£o do usu√°rio no Supabase Auth
    console.log('\nüîç Etapa 2: Cria√ß√£o do usu√°rio no Supabase Auth');
    
    const authResult = await mockSupabaseAuth.signUp({
      email: testData.email,
      password: testData.password,
      options: {
        data: {
          full_name: testData.fullName,
          profession: testData.profession
        }
      }
    });

    if (authResult.error) {
      throw new Error(`Erro no Supabase Auth: ${authResult.error.message}`);
    }

    const user = authResult.data.user;
    console.log('‚úÖ Usu√°rio criado no Auth');

    // 3. Testar trigger de cria√ß√£o de perfil
    console.log('\nüîç Etapa 3: Trigger de cria√ß√£o de perfil');
    
    const profile = mockProfileTrigger.createProfile(user);
    console.log('‚úÖ Perfil criado pelo trigger');

    // 4. Verificar integridade dos dados
    console.log('\nüîç Etapa 4: Verifica√ß√£o de integridade');
    
    if (profile.id !== user.id) {
      throw new Error('ID do perfil n√£o corresponde ao ID do usu√°rio');
    }
    console.log('‚úÖ ID do perfil corresponde ao usu√°rio');

    if (profile.email !== user.email) {
      throw new Error('Email do perfil n√£o corresponde ao email do usu√°rio');
    }
    console.log('‚úÖ Email do perfil corresponde ao usu√°rio');

    if (profile.full_name !== user.user_metadata.full_name) {
      throw new Error('Nome do perfil n√£o corresponde aos metadados');
    }
    console.log('‚úÖ Nome do perfil corresponde aos metadados');

    if (profile.role !== user.user_metadata.profession) {
      throw new Error('Role do perfil n√£o corresponde √† profiss√£o');
    }
    console.log('‚úÖ Role do perfil corresponde √† profiss√£o');

    // 5. Resultado final
    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
    console.log('\nüìä Resumo do teste:');
    console.log('- ‚úÖ Valida√ß√£o de dados: OK');
    console.log('- ‚úÖ Cria√ß√£o no Supabase Auth: OK');
    console.log('- ‚úÖ Trigger de perfil: OK');
    console.log('- ‚úÖ Integridade dos dados: OK');
    
    console.log('\nüîß Pr√≥ximos passos para teste real:');
    console.log('1. Iniciar Docker Desktop');
    console.log('2. Executar: supabase start');
    console.log('3. Testar cadastro no frontend: http://localhost:5173');
    console.log('4. Verificar cria√ß√£o do perfil no Supabase Studio');

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:', error.message);
    console.log('\nüîß A√ß√µes recomendadas:');
    console.log('- Verificar valida√ß√µes no frontend');
    console.log('- Revisar l√≥gica do servi√ßo de autentica√ß√£o');
    console.log('- Confirmar configura√ß√£o do trigger no banco');
  }
}

// Executar teste
testSignUpFlow();