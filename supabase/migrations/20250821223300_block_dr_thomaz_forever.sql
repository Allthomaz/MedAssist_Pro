-- Migra√ß√£o para bloquear permanentemente a cria√ß√£o do usu√°rio dr.thomaz@email.com
-- Esta migra√ß√£o cria uma constraint que impede a inser√ß√£o deste usu√°rio espec√≠fico

-- 1. Primeiro, remover o usu√°rio se existir
DELETE FROM public.profiles WHERE id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479' OR email = 'dr.thomaz@email.com';
DELETE FROM auth.users WHERE id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479' OR email = 'dr.thomaz@email.com';

-- 2. Criar uma fun√ß√£o que bloqueia a inser√ß√£o do usu√°rio espec√≠fico
CREATE OR REPLACE FUNCTION block_dr_thomaz_insertion()
RETURNS TRIGGER AS $$
BEGIN
    -- Bloquear inser√ß√£o do usu√°rio espec√≠fico
    IF NEW.id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479' OR NEW.email = 'dr.thomaz@email.com' THEN
        RAISE EXCEPTION 'BLOCKED: Usu√°rio dr.thomaz@email.com foi permanentemente bloqueado!';
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 3. Criar trigger para bloquear inser√ß√µes na tabela profiles
DROP TRIGGER IF EXISTS block_dr_thomaz_profiles ON public.profiles;
CREATE TRIGGER block_dr_thomaz_profiles
    BEFORE INSERT ON public.profiles
    FOR EACH ROW
    EXECUTE FUNCTION block_dr_thomaz_insertion();

-- 4. Criar trigger para bloquear inser√ß√µes na tabela auth.users
DROP TRIGGER IF EXISTS block_dr_thomaz_auth ON auth.users;
CREATE TRIGGER block_dr_thomaz_auth
    BEFORE INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION block_dr_thomaz_insertion();

-- 5. Verifica√ß√£o final
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM public.profiles WHERE id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479' OR email = 'dr.thomaz@email.com') THEN
        RAISE EXCEPTION '‚ùå FALHA: Usu√°rio dr.thomaz@email.com ainda existe em profiles!';
    END IF;
    
    RAISE NOTICE 'üîí BLOQUEIO ATIVADO: Usu√°rio dr.thomaz@email.com foi permanentemente bloqueado!';
END $$;